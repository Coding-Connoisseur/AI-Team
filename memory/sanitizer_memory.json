[
  {
    "role": "user",
    "content": "Here's the revised Python code incorporating the feedback:\n\n```python\nimport os\nimport openai\nfrom gi.repository import Gtk\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n\n# Check if the OpenAI API key is provided\nif not openai.api_key:\n    raise ValueError(\"Missing OpenAI API key\")\n\nclass ChatBotHandler:\n    def __init__(self):\n        self.builder = Gtk.Builder()\n        self.builder.add_from_file(\"your_glade_file.glade\")\n        self.builder.connect_signals(self)\n\n        window = self.builder.get_object(\"main_window\")\n        window.show_all()\n\n    def chat_gpt3(self, prompt):\n        try:\n            response = openai.Completion.create(engine=\"text-davinci-002\", prompt=prompt, max_tokens=150)\n            return response.choices[0].text.strip()\n        except Exception as e:\n            error_message = f\"An error occurred: {e}\"\n            print(error_message)\n            return error_message\n\n    def on_send_button_clicked(self, button):\n        input_field = self.builder.get_object(\"input_field\")\n        text = input_field.get_text()\n\n        response = self.chat_gpt3(text)\n\n        display_area = self.builder.get_object(\"display_area\")\n        display_area.set_text(response)\n\n    def on_clear_button_clicked(self, button):\n        input_field = self.builder.get_object(\"input_field\")\n        display_area = self.builder.get_object(\"display_area\")\n        \n        input_field.set_text(\"\")\n        display_area.set_text(\"\")\n\nif __name__ == \"__main__\":\n    handler = ChatBotHandler()\n    Gtk.main()\n```\n\nYou need to replace `\"your_glade_file.glade\"`, `\"main_window\"`, `\"input_field\"`, and `\"display_area\"` with your actual file names and object names."
  },
  {
    "role": "assistant",
    "content": "import os\nimport openai\nfrom gi.repository import Gtk\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n\n# Check if the OpenAI API key is provided\nif not openai.api_key:\n    raise ValueError(\"Missing OpenAI API key\")\n\nclass ChatBotHandler:\n    def __init__(self):\n        self.builder = Gtk.Builder()\n        self.builder.add_from_file(\"your_glade_file.glade\")\n        self.builder.connect_signals(self)\n\n        window = self.builder.get_object(\"main_window\")\n        window.show_all()\n\n    def chat_gpt3(self, prompt):\n        try:\n            response = openai.Completion.create(engine=\"text-davinci-002\", prompt=prompt, max_tokens=150)\n            return response.choices[0].text.strip()\n        except Exception as e:\n            error_message = f\"An error occurred: {e}\"\n            print(error_message)\n            return error_message\n\n    def on_send_button_clicked(self, button):\n        input_field = self.builder.get_object(\"input_field\")\n        text = input_field.get_text()\n\n        response = self.chat_gpt3(text)\n\n        display_area = self.builder.get_object(\"display_area\")\n        display_area.set_text(response)\n\n    def on_clear_button_clicked(self, button):\n        input_field = self.builder.get_object(\"input_field\")\n        display_area = self.builder.get_object(\"display_area\")\n        \n        input_field.set_text(\"\")\n        display_area.set_text(\"\")\n\nif __name__ == \"__main__\":\n    handler = ChatBotHandler()\n    Gtk.main()"
  }
]